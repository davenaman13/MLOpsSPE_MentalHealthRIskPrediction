pipeline {
    agent any
    
    environment {
        DOCKER_HUB_CREDS = credentials('docker-hub-credentials')
        COMPOSE_FILE = 'docker-compose.yml'
        BACKEND_SERVICE = 'mental-health-backend'
        FRONTEND_SERVICE = 'mental-health-frontend'
        BACKEND_PORT = '5001'
        FRONTEND_PORT = '5003'
    }
    
    stages {
        stage('Checkout') {
            steps {
                git(
                    url: 'https://github.com/davenaman13/MLOpsSPE_MentalHealthRIskPrediction.git',
                    branch: 'main',
                    changelog: false,
                    poll: false
                )
            }
        }
        
        stage('Docker Login') {
            steps {
                script {
                    sh '''
                        echo "$DOCKER_HUB_CREDS_PSW" | docker login \
                        -u "$DOCKER_HUB_CREDS_USR" \
                        --password-stdin
                    '''
                }
            }
        }
        
        stage('Build Images') {
            steps {
                script {
                    // Build backend with Python 3.10-slim
                    sh """
                        docker build \
                        -t ${BACKEND_SERVICE}:${env.BUILD_ID} \
                        -f backend/Dockerfile \
                        backend/
                    """
                    
                    // Build frontend with Python 3.9
                    sh """
                        docker build \
                        -t ${FRONTEND_SERVICE}:${env.BUILD_ID} \
                        -f frontend/Dockerfile \
                        frontend/
                    """
                }
            }
        }
        
        // stage('Run Tests') {
        //     steps {
        //         script {
        //             // Backend tests
        //             sh """
        //                 docker run --rm \
        //                 -e PORT=${BACKEND_PORT} \
        //                 ${BACKEND_SERVICE}:${env.BUILD_ID} \
        //                 python -m pytest tests/
        //             """
                    
        //             // Frontend tests
        //             sh """
        //                 docker run --rm \
        //                 -e PORT=${FRONTEND_PORT} \
        //                 ${FRONTEND_SERVICE}:${env.BUILD_ID} \
        //                 python -m pytest tests/
        //             """
        //         }
        //     }
        // }
        
        stage('Deploy') {
            steps {
                script {
                    // Stop existing containers if any
                    sh 'docker compose down --remove-orphans || true'
                    
                    // Start new deployment
                    sh 'docker compose up -d --build'
                    
                    // Verify backend health
                    sh """
                        curl --retry 10 --retry-delay 5 \
                        http://localhost:${BACKEND_PORT}/health \
                        || exit 1
                    """
                    
                    // Verify frontend availability
                    sh """
                        curl --retry 10 --retry-delay 5 \
                        http://localhost:${FRONTEND_PORT} \
                        || exit 1
                    """
                }
            }
        }
    }
    
    post {
        always {
            // Cleanup
            sh 'docker compose down || true'
            sh 'docker logout || true'
            cleanWs()
        }
        success {
            slackSend(
                color: 'good',
                message: """Deployment Successful!
                |Backend API: http://your-server:5001
                |Frontend App: http://your-server:5003
                |Build Log: ${env.BUILD_URL}""".stripMargin()
            )
        }
        failure {
            slackSend(
                color: 'danger',
                message: """Deployment Failed!
                |Check logs: ${env.BUILD_URL}""".stripMargin()
            )
        }
    }
}