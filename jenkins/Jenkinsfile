pipeline {
    agent any
    
    environment {
        COMPOSE_FILE = 'docker-compose.yml'
        BACKEND_SERVICE = 'mental-health-backend'
        FRONTEND_SERVICE = 'mental-health-frontend'
        BACKEND_PORT = '5001'
        FRONTEND_PORT = '5003'
    }
    
    stages {
        stage('Checkout') {
            steps {
                git(
                    url: 'https://github.com/davenaman13/MLOpsSPE_MentalHealthRIskPrediction.git',
                    branch: 'main'
                )
            }
        }
        
        stage('Build Images') {
            steps {
                sh """
                    docker build -t ${BACKEND_SERVICE}:${env.BUILD_ID} -f backend/Dockerfile backend/
                    docker build -t ${FRONTEND_SERVICE}:${env.BUILD_ID} -f frontend/Dockerfile frontend/
                """
            }
        }
        
        stage('Unit Tests') {
            steps {
                sh """
                    docker run --rm \
                    -e PORT=${BACKEND_PORT} \
                    ${BACKEND_SERVICE}:${env.BUILD_ID} \
                    python -m pytest tests/unit/ || exit 1
                    
                    docker run --rm \
                    -e PORT=${FRONTEND_PORT} \
                    ${FRONTEND_SERVICE}:${env.BUILD_ID} \
                    npm test || exit 1
                """
            }
        }
        
        stage('Integration Tests') {
            steps {
                sh """
                    docker-compose up -d
                    
                    # Wait for backend
                    while ! curl -f http://localhost:${BACKEND_PORT}/health; do
                        sleep 5
                        echo "Waiting for backend to start..."
                    done
                    
                    # Run integration tests
                    docker run --rm --network host \
                    -e BACKEND_URL=http://localhost:${BACKEND_PORT} \
                    -e FRONTEND_URL=http://localhost:${FRONTEND_PORT} \
                    your-test-image:latest \
                    pytest tests/integration/
                    
                    docker-compose down
                """
            }
        }
        
        stage('Push Images') {
            when {
                branch 'main'
            }
            steps {
                sh """
                    docker tag ${BACKEND_SERVICE}:${env.BUILD_ID} ${BACKEND_SERVICE}:latest
                    docker tag ${FRONTEND_SERVICE}:${env.BUILD_ID} ${FRONTEND_SERVICE}:latest
                    
                    docker push ${BACKEND_SERVICE}:latest
                    docker push ${FRONTEND_SERVICE}:latest
                """
            }
        }
        
        stage('Deploy') {
            when {
                branch 'main'
            }
            steps {
                sh """
                    docker-compose down || true
                    docker-compose pull || true
                    docker-compose up -d
                    
                    # Health checks
                    curl --retry 10 --retry-delay 5 --retry-connrefused \
                    http://localhost:${BACKEND_PORT}/health || exit 1
                    
                    curl --retry 10 --retry-delay 5 --retry-connrefused \
                    http://localhost:${FRONTEND_PORT} || exit 1
                """
            }
        }
    }
    
    post {
        always {
            sh """
                docker-compose down || true
                docker system prune -f || true
            """
            cleanWs()
        }
    }
}